package selfHealingOntology;


import edu.stanford.smi.protegex.owl.model.OWLModel;
import edu.stanford.smi.protegex.owl.model.RDFProperty;
import edu.stanford.smi.protegex.owl.model.RDFResource;
import edu.stanford.smi.protegex.owl.model.RDFSNamedClass;
import selfHealingOntology.impl.*;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 *
 * @version generated on Wed Mar 17 12:47:46 EET 2010
 */
public class SelfHealingProtegeFactory {

    private OWLModel owlModel;


    public SelfHealingProtegeFactory(OWLModel owlModel) {
        this.owlModel = owlModel;
    }
 
    public RDFSNamedClass getEntityClass() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#Entity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Entity createEntity(String name) {
        final RDFSNamedClass cls = getEntityClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultEntity(owlModel, cls.createInstance(name).getFrameID());
    }

    public Entity getEntity(String name) {
        RDFResource res = owlModel.getRDFResource(name);
        if (res == null) {return null;}
        if (res instanceof Entity) {
            return (Entity) res;
        } else if (res.hasProtegeType(getEntityClass())) {
            return new DefaultEntity(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Entity> getAllEntityInstances() {
        return getAllEntityInstances(false);
    }

    public Collection<Entity> getAllEntityInstances(boolean transitive) {
        Collection<Entity> result = new ArrayList<Entity>();
        final RDFSNamedClass cls = getEntityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultEntity(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getRuleGroupClass() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#RuleGroup";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RuleGroup createRuleGroup(String name) {
        final RDFSNamedClass cls = getRuleGroupClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultRuleGroup(owlModel, cls.createInstance(name).getFrameID());
    }

    public RuleGroup getRuleGroup(String name) {
        RDFResource res = owlModel.getRDFResource(name);
        if (res == null) {return null;}
        if (res instanceof RuleGroup) {
            return (RuleGroup) res;
        } else if (res.hasProtegeType(getRuleGroupClass())) {
            return new DefaultRuleGroup(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<RuleGroup> getAllRuleGroupInstances() {
        return getAllRuleGroupInstances(false);
    }

    public Collection<RuleGroup> getAllRuleGroupInstances(boolean transitive) {
        Collection<RuleGroup> result = new ArrayList<RuleGroup>();
        final RDFSNamedClass cls = getRuleGroupClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultRuleGroup(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getActionClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#Action";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Action createAction(String name) {
        final RDFSNamedClass cls = getActionClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultAction(owlModel, cls.createInstance(name).getFrameID());
    }

    public Action getAction(String name) {
        RDFResource res = owlModel.getRDFResource(name);
        if (res == null) {return null;}
        if (res instanceof Action) {
            return (Action) res;
        } else if (res.hasProtegeType(getActionClass())) {
            return new DefaultAction(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Action> getAllActionInstances() {
        return getAllActionInstances(false);
    }

    public Collection<Action> getAllActionInstances(boolean transitive) {
        Collection<Action> result = new ArrayList<Action>();
        final RDFSNamedClass cls = getActionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultAction(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getContextElementClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#ContextElement";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ContextElement createContextElement(String name) {
        final RDFSNamedClass cls = getContextElementClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultContextElement(owlModel, cls.createInstance(name).getFrameID());
    }

    public ContextElement getContextElement(String name) {
        RDFResource res = owlModel.getRDFResource(name);
        if (res == null) {return null;}
        if (res instanceof ContextElement) {
            return (ContextElement) res;
        } else if (res.hasProtegeType(getContextElementClass())) {
            return new DefaultContextElement(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<ContextElement> getAllContextElementInstances() {
        return getAllContextElementInstances(false);
    }

    public Collection<ContextElement> getAllContextElementInstances(boolean transitive) {
        Collection<ContextElement> result = new ArrayList<ContextElement>();
        final RDFSNamedClass cls = getContextElementClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultContextElement(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getActuatorClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#Actuator";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Actuator createActuator(String name) {
        final RDFSNamedClass cls = getActuatorClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultActuator(owlModel, cls.createInstance(name).getFrameID());
    }

    public Actuator getActuator(String name) {
        RDFResource res = owlModel.getRDFResource(name);
        if (res == null) {return null;}
        if (res instanceof Actuator) {
            return (Actuator) res;
        } else if (res.hasProtegeType(getActuatorClass())) {
            return new DefaultActuator(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Actuator> getAllActuatorInstances() {
        return getAllActuatorInstances(false);
    }

    public Collection<Actuator> getAllActuatorInstances(boolean transitive) {
        Collection<Actuator> result = new ArrayList<Actuator>();
        final RDFSNamedClass cls = getActuatorClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultActuator(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getPhysicalResourceClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#PhysicalResource";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public PhysicalResource createPhysicalResource(String name) {
        final RDFSNamedClass cls = getPhysicalResourceClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultPhysicalResource(owlModel, cls.createInstance(name).getFrameID());
    }

    public PhysicalResource getPhysicalResource(String name) {
        RDFResource res = owlModel.getRDFResource(name);
        if (res == null) {return null;}
        if (res instanceof PhysicalResource) {
            return (PhysicalResource) res;
        } else if (res.hasProtegeType(getPhysicalResourceClass())) {
            return new DefaultPhysicalResource(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<PhysicalResource> getAllPhysicalResourceInstances() {
        return getAllPhysicalResourceInstances(false);
    }

    public Collection<PhysicalResource> getAllPhysicalResourceInstances(boolean transitive) {
        Collection<PhysicalResource> result = new ArrayList<PhysicalResource>();
        final RDFSNamedClass cls = getPhysicalResourceClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultPhysicalResource(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getResourceClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#Resource";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Resource createResource(String name) {
        final RDFSNamedClass cls = getResourceClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultResource(owlModel, cls.createInstance(name).getFrameID());
    }

    public Resource getResource(String name) {
        RDFResource res = owlModel.getRDFResource(name);
        if (res == null) {return null;}
        if (res instanceof Resource) {
            return (Resource) res;
        } else if (res.hasProtegeType(getResourceClass())) {
            return new DefaultResource(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Resource> getAllResourceInstances() {
        return getAllResourceInstances(false);
    }

    public Collection<Resource> getAllResourceInstances(boolean transitive) {
        Collection<Resource> result = new ArrayList<Resource>();
        final RDFSNamedClass cls = getResourceClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultResource(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getPolicyClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#Policy";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Policy createPolicy(String name) {
        final RDFSNamedClass cls = getPolicyClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultPolicy(owlModel, cls.createInstance(name).getFrameID());
    }

    public Policy getPolicy(String name) {
        RDFResource res = owlModel.getRDFResource(name);
        if (res == null) {return null;}
        if (res instanceof Policy) {
            return (Policy) res;
        } else if (res.hasProtegeType(getPolicyClass())) {
            return new DefaultPolicy(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Policy> getAllPolicyInstances() {
        return getAllPolicyInstances(false);
    }

    public Collection<Policy> getAllPolicyInstances(boolean transitive) {
        Collection<Policy> result = new ArrayList<Policy>();
        final RDFSNamedClass cls = getPolicyClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultPolicy(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFSNamedClass getSensorClass() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#Sensor";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Sensor createSensor(String name) {
        final RDFSNamedClass cls = getSensorClass();
        if (name == null) {
            name = owlModel.getNextAnonymousResourceName();
        }
        return  new DefaultSensor(owlModel, cls.createInstance(name).getFrameID());
    }

    public Sensor getSensor(String name) {
        RDFResource res = owlModel.getRDFResource(name);
        if (res == null) {return null;}
        if (res instanceof Sensor) {
            return (Sensor) res;
        } else if (res.hasProtegeType(getSensorClass())) {
            return new DefaultSensor(owlModel, res.getFrameID());
        }
        return null;
    }

    public Collection<Sensor> getAllSensorInstances() {
        return getAllSensorInstances(false);
    }

    public Collection<Sensor> getAllSensorInstances(boolean transitive) {
        Collection<Sensor> result = new ArrayList<Sensor>();
        final RDFSNamedClass cls = getSensorClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add(new DefaultSensor(owlModel, owlIndividual.getFrameID()));
        }
        return result;
    }


    public RDFProperty getHasRuleCategoryProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasRuleCategory";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasBuiltInPhraseProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasBuiltInPhrase";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsRuleEnabledProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleEnabled";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getIsRuleGroupEnabledProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleGroupEnabled";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasClassPhraseProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasClassPhrase";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasPropertyPhraseProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasPropertyPhrase";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHas_policy_stringProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#has-policy-string";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getWebServiceURIProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#webServiceURI";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHas_measuring_unitProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#has-measuring-unit";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getValueOfServiceProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#valueOfService";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getEvaluatePolicyPProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#EvaluatePolicyP";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHas_position_ZProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#has-position-Z";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getEffectProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#effect";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getTypeOfServiceProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#typeOfService";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getAcceptableSensorValueProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#acceptableSensorValue";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHas_position_YProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#has-position-Y";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHas_influence_RadiusProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#has-influence-Radius";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHas_position_XProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#has-position-X";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasRuleGroupProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/3.3/swrla.owl#hasRuleGroup";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getAssociatedActionsProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#associatedActions";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getAssociatedResourcesProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#associatedResources";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getAssociatedActuatorsProperty() {
        final String uri = "http://www.owl-ontologies.com/Ontology1230214892.owl#associatedActuators";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }


    public RDFProperty getHasGranularityProperty() {
        final String uri = "http://swrl.stanford.edu/ontologies/built-ins/3.3/temporal.owl#hasGranularity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFProperty(name);
    }
}
