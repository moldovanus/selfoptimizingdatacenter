// Block definition (there may be more than one block per file)
FUNCTION_BLOCK negotiator

// Define input variables
VAR_INPUT
    server_cpu : REAL;
    task_cpu : REAL;
	
	server_memory : REAL;
    task_memory : REAL;
	
	server_storage : REAL;
    task_storage : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    negotiated_cpu : REAL;
    negotiated_memory: REAL;
    negotiated_storage : REAL;
END_VAR

// Fuzzify input variable 'server_cpu'
FUZZIFY server_cpu
    TERM available := (0, 0) (600, 1) (800,0) ; 
END_FUZZIFY

FUZZIFY server_memory
    TERM available := (0, 0) (600, 1) (800,0) ; 
END_FUZZIFY

FUZZIFY server_storage
    TERM available := (0, 0) (600, 1) (800,0) ; 
END_FUZZIFY



 
FUZZIFY task_cpu
    TERM requested := (200, 0) (400,1) ;
END_FUZZIFY

FUZZIFY task_memory
    TERM requested := (200, 0) (400,1) ;
END_FUZZIFY

FUZZIFY task_storage
    TERM requested := (200, 0) (400,1) ;
END_FUZZIFY



DEFUZZIFY negotiated_cpu
    TERM negotiated := (0,0) (199,0) (200,1) (400,1) (800,0);
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY negotiated_memory
    TERM negotiated := (0,0) (199,0) (200,1) (400,1) (800,0);
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY negotiated_storage
    TERM negotiated := (0,0) (199,0) (200,1) (400,1) (800,0);
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY


RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF server_cpu IS available AND task_cpu IS requested 
                THEN negotiated_cpu IS negotiated;
	RULE 2 : IF server_storage IS available AND task_storage IS requested 
                THEN negotiated_storage IS negotiated;
	RULE 3 : IF server_memory IS available AND task_memory IS requested 
                THEN negotiated_memory IS negotiated;
				
 
END_RULEBLOCK

END_FUNCTION_BLOCK
